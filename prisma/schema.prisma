// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                 @id @default(autoincrement())
  firstName        String
  lastName         String
  username         String              @unique()
  password         String
  Nutrition        Nutrition[]
  weight           Float
  height           Float
  goal             Goal                @default(MAINTENACE)
  UserWeigtDynamic UserWeightDynamic[]
  sex              Sex
  age              Int
  activityLevel    ActivityLevel
  workout          Workout[]
  programs         TrainingProgram[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime?           @updatedAt
}

model UserWeightDynamic {
  id        Int      @id @default(autoincrement())
  date      DateTime
  weight    Float
  userId    User     @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  foodName      String      @unique
  calories      Int
  proteins      Float
  fats          Float
  carbohydrates Float
  Nutrition     Nutrition[]
}

model Nutrition {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  food      Food     @relation(fields: [foodId], references: [id])
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foodId    Int
  userId    Int
  amount    Int
}

model TrainingProgram {
  id              String            @id @default(uuid())
  ProgramExercise ProgramExercise[]
  title           String
  description     String
  User            User              @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ProgramExercise {
  id          String                @id @default(uuid())
  name        String
  type        TrainingActivityType
  program     TrainingProgram       @relation(fields: [programId], references: [id])
  programId   String
  description String?
  sets        ProgramExercisesSet[]
  day         String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model ProgramExercisesSet {
  id                String          @id @default(uuid())
  programExercise   ProgramExercise @relation(fields: [programExerciseId], references: [id])
  programExerciseId String
  reps              Int
  weight            Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Workout {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  date      DateTime
  totalTime Int
  exercises WorkoutExercises[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model WorkoutExercises {
  id        String               @id @default(uuid())
  workout   Workout              @relation(fields: [workoutId], references: [id])
  workoutId String
  name      String
  type      TrainingActivityType
  sets      WorkoutExrcisesSet[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model WorkoutExrcisesSet {
  id                String           @id @default(uuid())
  workoutExercise   WorkoutExercises @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String
  reps              Int
  weight            Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum Goal {
  BULKING
  CUTTING
  MAINTENACE
}

enum Sex {
  MALE
  FEMALE
}

enum ActivityLevel {
  LITTLE_TO_NO_EXERCISE @map("1.2")
  LIGHT_EXERCISE        @map("1.37")
  MODERATE_EXERCISE     @map("1.55")
  VERY_ACTIVE           @map("1.725")
  EXTRA_ACTIVE          @map("1.9")
}

enum TrainingActivityType {
  REST
  EXERCISE
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
